<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Red Moses</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-12-20T01:26:31+06:00</updated>
<id>/</id>
<author>
  <name>Red Moses</name>
  <uri>/</uri>
  <email>musa@redmoses.me</email>
</author>


<entry>
  <title type="html"><![CDATA[Deploy Ladon web service with Gunicorn]]></title>
 <link rel="alternate" type="text/html" href="/deploy-Ladon-web-service-with-gunicorn/" />
  <id>/deploy-Ladon-web-service-with-gunicorn</id>
  <published>2014-07-02T00:00:00+06:00</published>
  <updated>2014-07-02T00:00:00+06:00</updated>
  <author>
    <name>Red Moses</name>
    <uri></uri>
    <email>musa@redmoses.me</email>
  </author>
  <content type="html">
    &lt;p&gt;Before starting I would like to mention that this article is not intended to teach Ladon or Gunicorn. It is rather for people who have worked their way around each of these libraries individually and are now seeking for a way to use them together.&lt;/p&gt;

&lt;p&gt;(You need to have Ladon and Gunicorn libraries installed in your environment)
I am using the example given on Ladon’s website. Let this be our &lt;strong&gt;calculator.py&lt;/strong&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from ladon.ladonizer import ladonize
 
 
class Calculator(object):
    #ladonize the method
    @ladonize(int, int, rtype=int)
    def add(self, a, b):
        return a + b&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/redmoses/d82efea640348198871c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Since we are using Gunicorn for a custom application we would need to implement it from our application. To deploy this application with Gunicorn I used the &lt;a href=&quot;http://docs.gunicorn.org/en/latest/custom.html&quot;&gt;custom application&lt;/a&gt; template given on Gunicorn’s documentation. Lets create our &lt;b&gt;server.py&lt;/b&gt; which is going to be our WSGI handler.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from __future__ import unicode_literals
import multiprocessing
import gunicorn.app.base
from gunicorn.six import iteritems
from ladon.server.wsgi import LadonWSGIApplication
from os.path import abspath, dirname
 
# The ladon wsgi application
application = LadonWSGIApplication(
              [&amp;#39;calculator&amp;#39;],
              [dirname(abspath(__file__))],
              catalog_name=&amp;#39;My Ladon webservice catalog&amp;#39;,
              catalog_desc=&amp;#39;This is the root of my cool webservice catalog&amp;#39;)
 
# Inherit from gunicorn base application class to create our application
class StandaloneApplication(gunicorn.app.base.BaseApplication):
    def __init__(self, app, options=None):
        self.options = options or {}
        self.application = app
        super(StandaloneApplication, self).__init__()
 
    # Extract config options
    def load_config(self):
        config = dict([(key, value) for key, value in iteritems(self.options)
                 if key in self.cfg.settings and value is not None])
 
        for key, value in iteritems(config):
            self.cfg.set(key.lower(), value)
 
    def load(self):
        return self.application
 
 
    if __name__ == &amp;#39;__main__&amp;#39;:
        # Set the options
        options = {
                # For simplicity I am using these default configurations: 
                # Localhost Ip(127.0.0.1), Default Port(5656) and Default no. of workers 4
                # You can take arguments from the command line for these attributes
                &amp;#39;bind&amp;#39;: &amp;#39;%s:%s&amp;#39; % (&amp;#39;127.0.0.1&amp;#39;, &amp;#39;5656&amp;#39;),
                &amp;#39;workers&amp;#39;: 4,
        }
 
    # Run the application
    StandaloneApplication(application, options).run()&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/redmoses/53baaa32ce76660fced7.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;From &lt;em&gt;lines 9-13&lt;/em&gt;, I am using LadonWSGIApplication to create a WSGI application from our calculator.py (this would be your actual code).&lt;/p&gt;

&lt;p&gt;From &lt;em&gt;lines 16-31&lt;/em&gt;, I am just inheriting from the Gunicorn base application class to create my own custom application.&lt;/p&gt;

&lt;p&gt;And finally there’s the main method which runs our application. You must notice that I’m passing the “&lt;em&gt;application&lt;/em&gt;” variable (&lt;em&gt;line 45&lt;/em&gt;) I had previously declared on &lt;em&gt;line 9&lt;/em&gt; with the some basic configurations like ip address and ports to bind to start the application.&lt;/p&gt;

&lt;p&gt;To run the application just use “python server.py” and it would start running on port 5656. To access the application visit &lt;a href=&quot;http://localhost:5656&quot;&gt;http://localhost:5656&lt;/a&gt; from your browser.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/deploy-Ladon-web-service-with-gunicorn/&quot;&gt;Deploy Ladon web service with Gunicorn&lt;/a&gt; was originally published by Red Moses at &lt;a href=&quot;&quot;&gt;Red Moses&lt;/a&gt; on July 02, 2014.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Transfer existing Repositories to GitLab]]></title>
 <link rel="alternate" type="text/html" href="/transfer-existing-repositories-to-gitLab/" />
  <id>/transfer-existing-repositories-to-gitLab</id>
  <published>2014-01-06T00:00:00+06:00</published>
  <updated>2014-01-06T00:00:00+06:00</updated>
  <author>
    <name>Red Moses</name>
    <uri></uri>
    <email>musa@redmoses.me</email>
  </author>
  <content type="html">
    &lt;p&gt;The developer team in my office were using Gerrit Code Review along with git-web before migrating to GitLab. So we had to transfer all our existing repositories to GitLab. This tutorial can also be used for migrating from other git based issue tracking systems. The GitLab documentation says to put all your bare repositories, the “.git” directories, into this location - “/home/git/repositories” and then use the import command. But this doesn’t do the job, it only creates blank empty projects under the Admin group with no source files or previous issues. So to solve this, just follow the steps below -&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# You should change $newdir into something you prefer&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The command is going to create a new directory inside the repositories directory&lt;/span&gt;

sudo cp -R /usr/local/gerrit2/git /home/git/repositories/&lt;span class=&quot;nv&quot;&gt;$newdir&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Change ownership of the directory&lt;/span&gt;
sudo chown -R git:git /home/git/repositories/&lt;span class=&quot;nv&quot;&gt;$newdir&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is for Gitlab versions 6 and less&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# And now you can run this command, provided by the GitLab Team&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Change to root user and go to GitLab&amp;#39;s directory&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/git/gitlab
sudo su

sudo -u git -H bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake gitlab:import:repos &lt;span class=&quot;nv&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For Gitlab versions 7 and onwards (That is, if you’ve installed Gitlab using the debian package)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Just run the following command&lt;/span&gt;
sudo gitlab-rake gitlab:import:repos&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you run the above command GitLab is going to create a new group named $newdir (i.e., the directory’s name) and import the repositories perfectly. Now you can access GitLab with your admin account and access all the projects under the newly created group.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/transfer-existing-repositories-to-gitLab/&quot;&gt;Transfer existing Repositories to GitLab&lt;/a&gt; was originally published by Red Moses at &lt;a href=&quot;&quot;&gt;Red Moses&lt;/a&gt; on January 06, 2014.&lt;/p&gt;
  </content>
</entry>

</feed>
