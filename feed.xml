<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Red Moses</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="//redmoses.me/feed.xml" />
<link rel="alternate" type="text/html" href="//redmoses.me" />
<updated>2015-12-23T21:44:26+06:00</updated>
<id>//redmoses.me/</id>
<author>
  <name>Red Moses</name>
  <uri>//redmoses.me/</uri>
  <email>musa@redmoses.me</email>
</author>


<entry>
  <title type="html"><![CDATA[Flask and Shell]]></title>
 <link rel="alternate" type="text/html" href="//redmoses.me/flask-and-shell/" />
  <id>//redmoses.me/flask-and-shell</id>
  <published>2015-12-20T13:28:11+06:00</published>
  <updated>2015-12-20T13:28:11+06:00</updated>
  <author>
    <name>Red Moses</name>
    <uri>//redmoses.me</uri>
    <email>musa@redmoses.me</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt; is an amazingly lightweight framework, and to my opinion its a great option 
for writing small simple applications in Python. &lt;!-- more --&gt;&lt;/p&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;An application in my company performs some tasks and then updates a MySql database 
accordingly. So to know how the application is progressing with the day’s tasks one 
has to ssh into the application server and then run the appropriate queries using 
mysql client. This is because the application only starts creating the reports once 
all the tasks are finished.&lt;/p&gt;

&lt;p&gt;My task was to figure out a way so that someone without any system administration 
knowledge might also access this data securely without anyone’s help.&lt;/p&gt;

&lt;h2 id=&quot;so-here-it-goes&quot;&gt;So here it goes…&lt;/h2&gt;

&lt;p&gt;My plan was to create a flask application that will be accessible from any web browser. When 
the correct path will be accessed the application will run some predefined shell command and 
return the results to the browser. Now this output might be a sensitive information, so we 
just can’t allow anyone to be able to access this. To implement a basic layer of security 
I have used IP white listing i.e, only allowing certain IPs to acccess the application.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;I ran the below commands on Ubuntu 14.04 Trusty, 
if you are using a different OS then your commands may vary accordingly&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;To go along with this tutorial you must have the following installed in your system -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python3 &lt;strong&gt;(usually installed by default on Ubuntu 14.04)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;virtualenv &lt;strong&gt;(sudo apt-get install python-virtualenv)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;MySql Server 5.5+ &amp;amp; Client &lt;strong&gt;(sudo apt-get install mysql-server-5.5)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Supervisor &lt;strong&gt;(sudo apt-get install supervisor)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;prepare-your-virtual-environment&quot;&gt;Prepare your virtual environment&lt;/h3&gt;

&lt;p&gt;To prepare your virtual environment use the following commands -&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# go to your workspace directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/workspace/
&lt;span class=&quot;c&quot;&gt;# create a virtualenv using python3&lt;/span&gt;
virtualenv -p /usr/bin/python3 flaskshell
&lt;span class=&quot;c&quot;&gt;# enter the virtualenv directory and perform the basic package installations and tasks&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;flaskshell
&lt;span class=&quot;c&quot;&gt;# activate virtualenv&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;bin/activate
&lt;span class=&quot;c&quot;&gt;# install flask&lt;/span&gt;
pip install flask
&lt;span class=&quot;c&quot;&gt;# create src and logs directory&lt;/span&gt;
mkdir src logs&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;prepare-a-sample-database&quot;&gt;Prepare a sample database&lt;/h3&gt;

&lt;p&gt;As we would be running a mysql query we first need to prepare a sample database for our task. To create a database do 
the following,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# create the database &lt;/span&gt;
mysql -u root -p -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;CREATE DATABASE flasktest; GRANT ALL ON flasktest.* TO flaskuser@localhost IDENTIFIED BY &amp;#39;flask123&amp;#39;; FLUSH PRIVILEGES&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# create a sample table&lt;/span&gt;
mysql -uflaskuser -pflask123 -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;CREATE TABLE flasktest.tasks (task_id INT NOT NULL AUTO_INCREMENT, task_title VARCHAR(50), task_status VARCHAR(50), PRIMARY KEY (task_id));&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# insert some sample data&lt;/span&gt;
mysql -uflaskuser -pflask123 -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;INSERT INTO flasktest.tasks (task_title, task_status) VALUES (&amp;#39;Task 1&amp;#39;, &amp;#39;Success&amp;#39;);&amp;quot;&lt;/span&gt;
mysql -uflaskuser -pflask123 -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;INSERT INTO flasktest.tasks (task_title, task_status) VALUES (&amp;#39;Task 2&amp;#39;, &amp;#39;Pending&amp;#39;);&amp;quot;&lt;/span&gt;
mysql -uflaskuser -pflask123 -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;INSERT INTO flasktest.tasks (task_title, task_status) VALUES (&amp;#39;Task 3&amp;#39;, &amp;#39;Failed&amp;#39;);&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now to check whether the database and table creations all went okay do the following,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mysql -uflaskuser -pflask123 -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;USE flasktest; SELECT COUNT(*) FROM tasks WHERE task_status=&amp;#39;Success&amp;#39;;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# the above command should print this,&lt;/span&gt;

+----------+
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; COUNT&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;*&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
+----------+
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
+----------+&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may run the commands with where statements for ‘Pending’ and ‘Failed’ as well just to make sure. All the 
queries should give the same result.&lt;/p&gt;

&lt;h3 id=&quot;the-code&quot;&gt;The code&lt;/h3&gt;

&lt;p&gt;Now create a file called &lt;strong&gt;app.py&lt;/strong&gt; inside the src directory,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;touch ~/workspace/flaskshell/src/app.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Inside the file put in the below code -&lt;/p&gt;

&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/redmoses/347a2ad006a518f09fbc.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Line 7&lt;/strong&gt; » This is the array for the white listed ips. 
You should replace the ips according to your needs. 
You may put in virtually as many ips as you want in this array&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Lines 8-10&lt;/strong&gt; » I’m defining the queries here. You may change 
the query according to your needs here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Lines 13-18&lt;/strong&gt; » The valid_ip() method. It returns true if the 
client’s ip belongs in the white list, otherwise it returns false.
It gets the client ip using the request package from flask that is 
defined on &lt;strong&gt;line 2&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Line 21&lt;/strong&gt; » Define the route for accessing the application&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Line 23&lt;/strong&gt; » Before processing the request check if the client’s
ip belong to the white list. If not then show Flask’s default 404 
page &lt;strong&gt;(lines 43-47)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Lines 24-29&lt;/strong&gt; » Compose the shell commands using the queries 
defined earlier&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Lines 32-37&lt;/strong&gt; » Try running the shell commands if it faces any error 
trying then the method will return the error message &lt;strong&gt;(line 39)&lt;/strong&gt;. If the 
execution is successful then it will return the results &lt;strong&gt;(line 41)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;run-the-application-as-a-service&quot;&gt;Run the application as a service&lt;/h3&gt;

&lt;p&gt;To run the application as a service I used supervisor. I’m not using it because 
its the best process manager, rather I’m just used to it and it seems to do the 
job.&lt;/p&gt;

&lt;p&gt;Define a program on supervisor.&lt;/p&gt;

&lt;p&gt;Create a new supervisor config file,&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo vim /etc/supervisor/conf.d/flaskshell.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Copy and paste the following code in the file. I’m assuming you have put the 
app in the location - &lt;strong&gt;/home/user/workspace/flaskshell&lt;/strong&gt; . You must change 
this value accordingly.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;program:stats&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/user/workspace/flaskshell/src
&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/user/workspace/flaskshell/bin/python app.py
&lt;span class=&quot;nv&quot;&gt;redirect_stderr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;stdout_logfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/user/workspace/flaskshell/logs/out.log
&lt;span class=&quot;nv&quot;&gt;stderr_logfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /home/user/workspace/flaskshell/logs/error.log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you should update the supervisor config and start the application&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo supervisorctl update stats
sudo supervisorctl start stats&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;accessing-the-application&quot;&gt;Accessing the application&lt;/h2&gt;

&lt;p&gt;As we have not defined any port for the application it will run on the default 
port 5000. To change this you may have a look at &lt;a href=&quot;http://stackoverflow.com/a/29079598/2894655&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So you can find the application at &lt;a href=&quot;#&quot;&gt;http://SERVER_IP:5000&lt;/a&gt;. And the 
the status updates should be available at &lt;a href=&quot;#&quot;&gt;http://SERVER_IP:5000/status/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you’ve enjoyed the post and it was of help to you. Please feel free 
to leave any comments below.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//redmoses.me/flask-and-shell/&quot;&gt;Flask and Shell&lt;/a&gt; was originally published by Red Moses at &lt;a href=&quot;//redmoses.me&quot;&gt;Red Moses&lt;/a&gt; on December 20, 2015.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Deploy Ladon web service with Gunicorn]]></title>
 <link rel="alternate" type="text/html" href="//redmoses.me/deploy-Ladon-web-service-with-gunicorn/" />
  <id>//redmoses.me/deploy-Ladon-web-service-with-gunicorn</id>
  <published>2014-07-02T00:00:00+06:00</published>
  <updated>2014-07-02T00:00:00+06:00</updated>
  <author>
    <name>Red Moses</name>
    <uri>//redmoses.me</uri>
    <email>musa@redmoses.me</email>
  </author>
  <content type="html">
    &lt;p&gt;Before starting I would like to mention that this article is not intended to teach Ladon or Gunicorn. 
It is rather for people who have worked their way around each of these libraries individually and are 
now seeking for a way to use them together. &lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;(You need to have Ladon and Gunicorn libraries installed in your environment)
I am using the example given on Ladon’s website. Let this be our &lt;strong&gt;calculator.py&lt;/strong&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from ladon.ladonizer import ladonize
 
 
class Calculator(object):
    #ladonize the method
    @ladonize(int, int, rtype=int)
    def add(self, a, b):
        return a + b&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/redmoses/d82efea640348198871c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Since we are using Gunicorn for a custom application we would need to implement it from our application. To deploy this application with Gunicorn I used the &lt;a href=&quot;http://docs.gunicorn.org/en/latest/custom.html&quot;&gt;custom application&lt;/a&gt; template given on Gunicorn’s documentation. Lets create our &lt;b&gt;server.py&lt;/b&gt; which is going to be our WSGI handler.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from __future__ import unicode_literals
import multiprocessing
import gunicorn.app.base
from gunicorn.six import iteritems
from ladon.server.wsgi import LadonWSGIApplication
from os.path import abspath, dirname
 
# The ladon wsgi application
application = LadonWSGIApplication(
              [&amp;#39;calculator&amp;#39;],
              [dirname(abspath(__file__))],
              catalog_name=&amp;#39;My Ladon webservice catalog&amp;#39;,
              catalog_desc=&amp;#39;This is the root of my cool webservice catalog&amp;#39;)
 
# Inherit from gunicorn base application class to create our application
class StandaloneApplication(gunicorn.app.base.BaseApplication):
    def __init__(self, app, options=None):
        self.options = options or {}
        self.application = app
        super(StandaloneApplication, self).__init__()
 
    # Extract config options
    def load_config(self):
        config = dict([(key, value) for key, value in iteritems(self.options)
                 if key in self.cfg.settings and value is not None])
 
        for key, value in iteritems(config):
            self.cfg.set(key.lower(), value)
 
    def load(self):
        return self.application
 
 
    if __name__ == &amp;#39;__main__&amp;#39;:
        # Set the options
        options = {
                # For simplicity I am using these default configurations: 
                # Localhost Ip(127.0.0.1), Default Port(5656) and Default no. of workers 4
                # You can take arguments from the command line for these attributes
                &amp;#39;bind&amp;#39;: &amp;#39;%s:%s&amp;#39; % (&amp;#39;127.0.0.1&amp;#39;, &amp;#39;5656&amp;#39;),
                &amp;#39;workers&amp;#39;: 4,
        }
 
    # Run the application
    StandaloneApplication(application, options).run()&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/redmoses/53baaa32ce76660fced7.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;From &lt;em&gt;lines 9-13&lt;/em&gt;, I am using LadonWSGIApplication to create a WSGI application from our calculator.py (this would be your actual code).&lt;/p&gt;

&lt;p&gt;From &lt;em&gt;lines 16-31&lt;/em&gt;, I am just inheriting from the Gunicorn base application class to create my own custom application.&lt;/p&gt;

&lt;p&gt;And finally there’s the main method which runs our application. You must notice that I’m passing the “&lt;em&gt;application&lt;/em&gt;” variable (&lt;em&gt;line 45&lt;/em&gt;) I had previously declared on &lt;em&gt;line 9&lt;/em&gt; with the some basic configurations like ip address and ports to bind to start the application.&lt;/p&gt;

&lt;p&gt;To run the application just use “python server.py” and it would start running on port 5656. To access the application visit &lt;a href=&quot;http://localhost:5656&quot;&gt;http://localhost:5656&lt;/a&gt; from your browser.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//redmoses.me/deploy-Ladon-web-service-with-gunicorn/&quot;&gt;Deploy Ladon web service with Gunicorn&lt;/a&gt; was originally published by Red Moses at &lt;a href=&quot;//redmoses.me&quot;&gt;Red Moses&lt;/a&gt; on July 02, 2014.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Transfer existing Repositories to GitLab]]></title>
 <link rel="alternate" type="text/html" href="//redmoses.me/transfer-existing-repositories-to-gitLab/" />
  <id>//redmoses.me/transfer-existing-repositories-to-gitLab</id>
  <published>2014-01-06T00:00:00+06:00</published>
  <updated>2014-01-06T00:00:00+06:00</updated>
  <author>
    <name>Red Moses</name>
    <uri>//redmoses.me</uri>
    <email>musa@redmoses.me</email>
  </author>
  <content type="html">
    &lt;p&gt;The developer team in my office were using Gerrit Code Review along with git-web before migrating to GitLab. 
So we had to transfer all our existing repositories to GitLab. This tutorial can also be used for migrating 
from other git based issue tracking systems. &lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;The GitLab documentation says to put all your bare repositories, 
the “.git” directories, into this location - “/home/git/repositories” and then use the import command. But 
this doesn’t do the job, it only creates blank empty projects under the Admin group with no source files or 
previous issues. So to solve this, just follow the steps below -&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# You should change $newdir into something you prefer&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The command is going to create a new directory inside the repositories directory&lt;/span&gt;

sudo cp -R /usr/local/gerrit2/git /home/git/repositories/&lt;span class=&quot;nv&quot;&gt;$newdir&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Change ownership of the directory&lt;/span&gt;
sudo chown -R git:git /home/git/repositories/&lt;span class=&quot;nv&quot;&gt;$newdir&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is for Gitlab versions 6 and less&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# And now you can run this command, provided by the GitLab Team&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Change to root user and go to GitLab&amp;#39;s directory&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/git/gitlab
sudo su

sudo -u git -H bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake gitlab:import:repos &lt;span class=&quot;nv&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For Gitlab versions 7 and onwards (That is, if you’ve installed Gitlab using the debian package)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Just run the following command&lt;/span&gt;
sudo gitlab-rake gitlab:import:repos&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you run the above command GitLab is going to create a new group named $newdir (i.e., the directory’s name) and import the repositories perfectly. Now you can access GitLab with your admin account and access all the projects under the newly created group.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;//redmoses.me/transfer-existing-repositories-to-gitLab/&quot;&gt;Transfer existing Repositories to GitLab&lt;/a&gt; was originally published by Red Moses at &lt;a href=&quot;//redmoses.me&quot;&gt;Red Moses&lt;/a&gt; on January 06, 2014.&lt;/p&gt;
  </content>
</entry>

</feed>
